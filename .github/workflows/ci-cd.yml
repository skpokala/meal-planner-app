name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  # Testing Phase
  frontend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:ci
      timeout-minutes: 10
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build:ci

  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: test-meal-planner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Wait for MongoDB and test connection
      run: |
        echo "Waiting for MongoDB to be ready..."
        # Wait for MongoDB port to be available
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 2; done'
        echo "MongoDB port is accessible!"
        # Give MongoDB a few more seconds to fully initialize
        sleep 5
        echo "MongoDB should be ready for connections"
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm run test:ci
      timeout-minutes: 10
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
        # Use the MongoDB service instead of Memory Server
        CI: true
        MONGODB_URI: mongodb://localhost:27017/test-meal-planner
        JEST_TIMEOUT: 30000
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Optional Docker build (only on main branch or manual trigger)
  docker-build:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production images (single platform for speed)
      run: |
        # Build production images for single platform only
        docker compose build --no-cache
        echo "✅ Production images built successfully"

  # Optional security audit (only on main branch or manual trigger)
  security-audit:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Quick security audit (production dependencies only)
      working-directory: ./backend
      run: |
        npm ci --production
        npm audit --audit-level high --omit=dev || echo "⚠️  Security audit completed with warnings"

  # Build and Publish Phase (only on main branch, tags, or releases)
  build-and-push:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [frontend, backend, ml]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Read version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Package version: ${VERSION}"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v${{ steps.package-version.outputs.version }}
          type=raw,value=${{ steps.package-version.outputs.version }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: ${{ matrix.service == 'frontend' && format('REACT_APP_VERSION={0}\nREACT_APP_BUILD_TIME={1}', steps.package-version.outputs.version, github.event.head_commit.timestamp) || '' }}
    
    - name: Image publication summary
      run: |
        echo "🎉 Successfully published to GHCR:"
        echo "📦 Image: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}"
        echo "🏷️ Version: ${{ steps.package-version.outputs.version }}"
        echo "🔗 Registry: ${{ env.REGISTRY }}"
        echo ""
        echo "Available tags:"
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'

  publish-compose:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for compose
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Create production docker-compose.yml
      run: |
        cat > docker-compose.prod.yml << 'EOF'
        version: '3.8'
        
        services:
          frontend:
            image: ${{ env.IMAGE_PREFIX }}-frontend:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
            depends_on:
              - backend
            restart: unless-stopped
          
          backend:
            image: ${{ env.IMAGE_PREFIX }}-backend:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
            ports:
              - "5000:5000"
            environment:
              - NODE_ENV=production
              - MONGODB_URI=mongodb://mongo:27017/meal_planner
              - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
              - ML_SERVICE_URL=http://ml-service:5003
            depends_on:
              - mongo
              - ml-service
            restart: unless-stopped

          ml-service:
            image: ${{ env.IMAGE_PREFIX }}-ml:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
            ports:
              - "5003:5003"
            environment:
              - MONGODB_URI=mongodb://mongo:27017/meal_planner
              - ML_SERVICE_PORT=5003
              - ML_SERVICE_HOST=0.0.0.0
              - DEBUG=false
            depends_on:
              - mongo
            restart: unless-stopped
          
          mongo:
            image: mongo:7.0
            ports:
              - "27017:27017"
            volumes:
              - mongo_data:/data/db
              - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
            environment:
              - MONGO_INITDB_DATABASE=meal_planner
            restart: unless-stopped
        
        volumes:
          mongo_data:
        
        networks:
          default:
            name: meal-planner-network
        EOF
    
    - name: Create deployment README
      run: |
        cat > DEPLOYMENT.md << 'EOF'
        # Meal Planner App - Docker Deployment
        
        ## Quick Start
        
        ### Using Docker Compose (Recommended)
        
        1. Download the production compose file:
        ```bash
        curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
        ```
        
        2. Set environment variables:
        ```bash
        export JWT_SECRET="your-secure-jwt-secret-here"
        ```
        
        3. Start the application:
        ```bash
        docker-compose -f docker-compose.prod.yml up -d
        ```
        
        4. Access the application:
        - Frontend: http://localhost:3000
        - Backend API: http://localhost:5000
        
        ### Using Individual Containers
        
        ```bash
        # Start MongoDB
        docker run -d --name meal-planner-mongo \
          -p 27017:27017 \
          -v mongo_data:/data/db \
          mongo:7.0
        
        # Start Backend
        docker run -d --name meal-planner-backend \
          -p 5000:5000 \
          -e NODE_ENV=production \
          -e MONGODB_URI=mongodb://meal-planner-mongo:27017/meal-planner \
          -e JWT_SECRET=your-jwt-secret-here \
          --link meal-planner-mongo:mongo \
          ${{ env.IMAGE_PREFIX }}-backend:latest
        
        # Start Frontend
        docker run -d --name meal-planner-frontend \
          -p 3000:3000 \
          -e NODE_ENV=production \
          --link meal-planner-backend:backend \
          ${{ env.IMAGE_PREFIX }}-frontend:latest
        ```
        
        ## Environment Variables
        
        ### Backend
        - `NODE_ENV`: Set to `production`
        - `MONGODB_URI`: MongoDB connection string
        - `JWT_SECRET`: Secret key for JWT tokens (required)
        - `PORT`: Server port (default: 5000)
        
        ### Frontend
        - `NODE_ENV`: Set to `production`
        - `REACT_APP_API_URL`: Backend API URL (default: http://localhost:5000)
        
        ## Health Checks
        
        - Backend: `GET /health`
        - Frontend: `GET /` (returns React app)
        
        ## Default Credentials
        
        - Username: `admin`
        - Password: `password`
        
        **⚠️ Important: Change the default admin password after first login!**
        
        ## Volumes
        
        - `mongo_data`: MongoDB data persistence
        
        ## Ports
        
        - `3000`: Frontend (React app)
        - `5000`: Backend (API server)
        - `27017`: MongoDB (if exposed)
        
        ## Updates
        
        To update to the latest version:
        
        ```bash
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d
        ```
        
        ## Support
        
        For issues and support, visit: https://github.com/${{ github.repository }}/issues
        EOF
    
    - name: Upload deployment files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: |
          docker-compose.prod.yml
          DEPLOYMENT.md
        retention-days: 90

  create-version-tag:
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    needs: [build-and-push, publish-compose]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Read version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Package version: ${VERSION}"
    
    - name: Check if tag exists
      id: tag-exists
      run: |
        if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create version tag
      if: steps.tag-exists.outputs.exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.package-version.outputs.version }}" -m "Release v${{ steps.package-version.outputs.version }}"
        git push origin "v${{ steps.package-version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-push, publish-compose]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download deployment files
      uses: actions/download-artifact@v4
      with:
        name: deployment-files
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          docker-compose.prod.yml
          DEPLOYMENT.md
        generate_release_notes: true
        body: |
          ## Docker Images
          
          This release includes the following Docker images published to GitHub Container Registry:
          
          - **Frontend**: `${{ env.IMAGE_PREFIX }}-frontend:${{ github.ref_name }}`
          - **Backend**: `${{ env.IMAGE_PREFIX }}-backend:${{ github.ref_name }}`
          - **ML Service**: `${{ env.IMAGE_PREFIX }}-ml:${{ github.ref_name }}`
          
          ## Quick Deployment
          
          ```bash
          # Download and start the application
          curl -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/docker-compose.prod.yml
          export JWT_SECRET="your-secure-jwt-secret-here"
          docker-compose -f docker-compose.prod.yml up -d
          ```
          
          ## What's Changed
          
          See the full changelog and deployment instructions in the attached files.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
